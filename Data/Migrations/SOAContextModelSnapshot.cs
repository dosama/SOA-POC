// <auto-generated />
using System;
using Data.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Data.Migrations
{
    [DbContext(typeof(SOAContext))]
    partial class SOAContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Courses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new { Id = 1, Content = "Course Content", Title = "Course1" },
                        new { Id = 2, Content = "Course2 Content", Title = "Course2" },
                        new { Id = 3, Content = "Course3 Content", Title = "Course3" }
                    );
                });

            modelBuilder.Entity("Data.Exams", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Duration");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Exams");

                    b.HasData(
                        new { Id = 1, Content = "Exam Content", Title = "Exam1" },
                        new { Id = 2, Content = "Exam2 Content", Title = "Exam2" },
                        new { Id = 3, Content = "Exam3 Content", Title = "Exam3" }
                    );
                });

            modelBuilder.Entity("Data.StudentCourses", b =>
                {
                    b.Property<int>("StudentId");

                    b.Property<int>("CourseId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId", "CourseId")
                        .IsUnique()
                        .HasName("IX_UserCourses");

                    b.ToTable("StudentCourses");

                    b.HasData(
                        new { StudentId = 1, CourseId = 1 },
                        new { StudentId = 1, CourseId = 2 },
                        new { StudentId = 1, CourseId = 3 },
                        new { StudentId = 2, CourseId = 1 },
                        new { StudentId = 2, CourseId = 2 },
                        new { StudentId = 3, CourseId = 3 }
                    );
                });

            modelBuilder.Entity("Data.StudentExams", b =>
                {
                    b.Property<int>("StudentId");

                    b.Property<int>("ExamId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("StudentId", "ExamId");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId", "ExamId")
                        .IsUnique()
                        .HasName("IX_UserExams");

                    b.ToTable("StudentExams");

                    b.HasData(
                        new { StudentId = 1, ExamId = 1 },
                        new { StudentId = 1, ExamId = 2 },
                        new { StudentId = 1, ExamId = 3 },
                        new { StudentId = 2, ExamId = 1 },
                        new { StudentId = 2, ExamId = 2 },
                        new { StudentId = 3, ExamId = 3 }
                    );
                });

            modelBuilder.Entity("Data.Students", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new { Id = 1, FirstName = "User1", LastName = "User1" },
                        new { Id = 2, FirstName = "User2", LastName = "User2" },
                        new { Id = 3, FirstName = "User3", LastName = "User3" }
                    );
                });

            modelBuilder.Entity("Data.StudentCourses", b =>
                {
                    b.HasOne("Data.Courses", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_UserCourses_Courses");

                    b.HasOne("Data.Students", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_UserCourses_Users");
                });

            modelBuilder.Entity("Data.StudentExams", b =>
                {
                    b.HasOne("Data.Exams", "Exam")
                        .WithMany("StudentExams")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_UserExams_Exams");

                    b.HasOne("Data.Students", "Student")
                        .WithMany("StudentExams")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_UserExams_Users");
                });
#pragma warning restore 612, 618
        }
    }
}
